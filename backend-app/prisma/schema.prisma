// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
 
datasource db {
  provider = "postgresql" // change si tu utilises MySQL
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}
 
enum Role {
  admin
  manager
  employee
}
 
enum Status {
  normal
  delay
  absence
  incomplete
}
 
model user {
  id              Int      @id @default(autoincrement())
  firstName       String   @db.VarChar(100)
  lastName        String   @db.VarChar(100)
  email           String   @unique @db.VarChar(255)
  phone           String?  @db.VarChar(20)
  hashedPassword  String   @db.VarChar(255)
  role            Role     @default(employee)
  isActive        Boolean  @default(false)
  teamId          Int?
  scheduleId      Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  deletedAt       DateTime?
 
  team            team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)
  schedule        schedule? @relation(fields: [scheduleId], references: [id], onDelete: SetNull)
  managedTeams    team[]   @relation("TeamManager")
  timesheets      timesheet[]
  reports         report[] @relation("ReportManager")
  exceptionalEntries exceptional_schedule[]
 
  @@index([email])
  @@index([role])
  @@index([teamId])
  @@index([scheduleId])
}
 
model team {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?
  managerId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  deletedAt   DateTime?
 
  manager     user     @relation("TeamManager", fields: [managerId], references: [id], onDelete: Restrict)
  members     user[]
  reports     report[]
 
  @@index([managerId])
}
 
model schedule {
  id                 Int      @id @default(autoincrement())
  name               String   @db.VarChar(100)
  start_hour         DateTime
  end_hour           DateTime
  active_days        Json
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())
 
  users              user[]
  exceptionalEntries exceptional_schedule[]
}
 
model timesheet {
  id           Int      @id @default(autoincrement())
  employeeId   Int
  date         DateTime
  hour         DateTime
  clockin      Boolean
  status       Status   @default(normal)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
 
  employee     user     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
 
  @@index([employeeId])
  @@index([date])
  @@index([employeeId, date])
  @@index([status])
}
 
model report {
  id           Int      @id @default(autoincrement())
  managerId    Int?
  teamId       Int?
  periodStart  DateTime
  periodEnd    DateTime
  kpiType      String   @db.VarChar(50)
  value        Float
  metadata     Json?
  createdAt    DateTime @default(now())
 
  manager      user?    @relation("ReportManager", fields: [managerId], references: [id], onDelete: SetNull)
  team         team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)
 
  @@index([managerId])
  @@index([teamId])
  @@index([kpiType])
  @@index([periodStart, periodEnd])
}
 
model exceptional_schedule {
  id           Int      @id @default(autoincrement())
  employeeId   Int
  date         DateTime
  scheduleId   Int
  createdAt    DateTime @default(now())
 
  employee     user     @relation(fields: [employeeId], references: [id])
  schedule     schedule @relation(fields: [scheduleId], references: [id])
 
  @@index([employeeId])
  @@index([date])
  @@index([scheduleId])
}