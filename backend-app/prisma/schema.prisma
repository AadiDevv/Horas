// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql" // change si tu utilises MySQL
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

model User {
  id              Int       @id @default(autoincrement())
  prenom          String    @db.VarChar(100)
  nom             String    @db.VarChar(100)
  email           String    @unique @db.VarChar(255)
  telephone       String?   @db.VarChar(20)
  hashedPassword  String    @db.VarChar(255)
  role            Role      @default(employe)
  isActive        Boolean   @default(false)
  equipeId        Int?
  horaireId       Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  deletedAt       DateTime?

  // Relations
  equipe          Equipe?   @relation(fields: [equipeId], references: [id], onDelete: SetNull)
  horaire         Horaire?  @relation(fields: [horaireId], references: [id], onDelete: SetNull)
  managedEquipes  Equipe[]  @relation("ManagerEquipes")
  pointages       Pointage[]
  rapports        Rapport[] @relation("RapportManager")
  horairesExceptionnels HoraireExceptionnel[]

  @@index([email])
  @@index([role])
  @@index([equipeId])
  @@index([horaireId])
}

model Equipe {
  id          Int       @id @default(autoincrement())
  nom         String    @db.VarChar(100)        
  description String?
  managerId   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  deletedAt   DateTime?

  // Relations
  manager     User      @relation("ManagerEquipes", fields: [managerId], references: [id], onDelete: Restrict)
  membres     User[]
  rapports    Rapport[]

  @@index([managerId])
}

model Horaire {
  id           Int       @id @default(autoincrement())
  nom          String    @db.VarChar(100)
  heureDebut   DateTime  @db.Time
  heureFin     DateTime  @db.Time
  joursActifs  Json
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())

  utilisateurs User[]
  exceptions   HoraireExceptionnel[]
}

model Pointage {
  id         Int       @id @default(autoincrement())
  employeId  Int
  date       DateTime  @db.Date
  heure      DateTime
  clockin    Boolean
  status     PointageStatus @default(normal)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  // Relations
  employe    User      @relation(fields: [employeId], references: [id], onDelete: Cascade)

  @@index([employeId])
  @@index([date])
  @@index([status])
  @@index([employeId, date])
}

model Rapport {
  id           Int       @id @default(autoincrement())
  managerId    Int?
  equipeId     Int?
  periodeDebut DateTime  @db.Date
  periodeFin   DateTime  @db.Date
  kpiType      String    @db.VarChar(50)
  valeur       Float
  metadata     Json?
  createdAt    DateTime  @default(now())

  // Relations
  manager      User?     @relation("RapportManager", fields: [managerId], references: [id], onDelete: SetNull)
  equipe       Equipe?   @relation(fields: [equipeId], references: [id], onDelete: SetNull)

  @@index([managerId])
  @@index([equipeId])
  @@index([kpiType])
  @@index([periodeDebut, periodeFin])
}

model HoraireExceptionnel {
  id             Int       @id @default(autoincrement())
  employeId      Int
  date           DateTime  @db.Date
  horaireId      Int
  createdAt      DateTime  @default(now())

  // Relations
  employe        User      @relation(fields: [employeId], references: [id], onDelete: Cascade)
  horaire        Horaire   @relation(fields: [horaireId], references: [id])

  @@index([employeId])
  @@index([date])
  @@index([horaireId])
}

// =========================================
// ENUMS
// =========================================

enum Role {
  admin
  manager
  employe
}

enum PointageStatus {
  normal
  retard
  absence
  incomplet
}