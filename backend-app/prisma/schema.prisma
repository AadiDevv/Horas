// TIME MANAGER Prisma Schema (Version Hybride Optimisée)

datasource db {
  provider = "postgresql" // change si tu utilises MySQL
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              Int       @id @default(autoincrement())
  prenom          String    @db.VarChar(100)
  nom             String    @db.VarChar(100)
  email           String    @unique @db.VarChar(255)
  telephone       String?   @db.VarChar(20)
  password_hash   String    @db.VarChar(255)
  role            Role      @default(employe)
  equipeId        Int?
  plageHoraireId  Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  deletedAt       DateTime?

  equipe          Equipe?   @relation(fields: [equipeId], references: [id], onDelete: SetNull)
  plageHoraire    Horaire?  @relation(fields: [plageHoraireId], references: [id], onDelete: SetNull)
  equipesManagees Equipe[]  @relation("EquipeManager")
  pointages       Pointage[]
  rapports        Rapport[] @relation("ManagerRapport")
  horairesEx      HoraireExceptionnel[]

  @@index([email])
  @@index([role])
  @@index([equipeId])
  @@index([plageHoraireId])
}

model Equipe {
  id             Int       @id @default(autoincrement())
  nom            String    @db.VarChar(100)
  description    String?
  managerId      Int
  horaireId      Int?      // ajout : lien vers Horaire
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  deletedAt      DateTime?

  manager User   @relation("EquipeManager", fields: [managerId], references: [id], onDelete: Restrict)
  membres User[]
  rapports Rapport[]
  horaire Horaire? @relation(fields: [horaireId], references: [id], onDelete: SetNull)

  @@index([managerId])
  @@index([horaireId])
}

model Horaire {
  id          Int      @id @default(autoincrement())
  nom         String   @db.VarChar(100)
  heureDebut  DateTime @db.Time
  heureFin    DateTime @db.Time
  joursActifs Json     // [1,2,3,4,5] = Lun-Ven ; 1=Lundi, 7=Dimanche
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  users      User[]
  equipes    Equipe[]
  horairesEx HoraireExceptionnel[]
}

model Pointage {
  id         Int       @id @default(autoincrement())
  employeId  Int
  date       DateTime  @db.Date
  heure      DateTime
  clockin    Boolean   // true=arrivée, false=départ
  status     Status    @default(normal)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  employe User @relation(fields: [employeId], references: [id], onDelete: Cascade)

  @@index([employeId])
  @@index([date])
  @@index([status])
  @@index([employeId, date])
}

model Rapport {
  id           Int       @id @default(autoincrement())
  managerId    Int?
  equipeId     Int?
  periodeDebut DateTime  @db.Date
  periodeFin   DateTime  @db.Date
  kpiType      String    @db.VarChar(50)
  valeur       Float
  metadata     Json?
  createdAt    DateTime  @default(now())

  manager User?  @relation("ManagerRapport", fields: [managerId], references: [id], onDelete: SetNull)
  equipe  Equipe? @relation(fields: [equipeId], references: [id], onDelete: SetNull)

  @@index([managerId])
  @@index([equipeId])
  @@index([kpiType])
  @@index([periodeDebut, periodeFin])
}

model HoraireExceptionnel {
  id             Int      @id @default(autoincrement())
  employeId      Int
  date           DateTime @db.Date
  plageHoraireId Int
  createdAt      DateTime @default(now())

  employe User   @relation(fields: [employeId], references: [id])
  horaire Horaire @relation(fields: [plageHoraireId], references: [id])

  @@index([employeId])
  @@index([date])
  @@index([plageHoraireId])
}

enum Role {
  admin
  manager
  employe
}

enum Status {
  normal
  retard
  absence
  incomplet
}
